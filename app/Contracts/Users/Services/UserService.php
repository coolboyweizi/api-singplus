<?php

namespace SingPlus\Contracts\Users\Services;

use Illuminate\Support\Collection;
use SingPlus\Contracts\Users\Models\User as UserContract;

interface UserService
{
  /**
   * indicate whether user is exists or not
   *
   * @param string $mobile    mobile with country code
   *
   * @return bool
   */
  public function userExists(string $mobile) : bool;

  /**
   * Fetch user by id
   *
   * @param string $userId    user id
   *
   * @return ?User            extra properties as:
   *                          - isPasswordSet bool
   *                          - source ?null    mobile|socialite|synthetic
   *                          - createdAt \Carbon\Carbon
   */
  public function fetchUser(string $userId) : ?UserContract;

  /**
   * Fetch user by mobile
   *
   * @param string $mobile    mobile with country code
   *
   * @return ?\stdClass       properties as below:
   *                          - userId string   user id
   *                          - source string  user source
   */
  public function fetchUserByMobile(string $mobile) : ?\stdClass;

  /**
   * Update user's tudc info or create a new tudc info if which not exists
   *
   * @param string $appChannel
   * @param string $userId
   * @param string $tudcOpenid
   * @param string $tudcToken
   */
  public function updateUserTUDCInfo(
    string $appChannel,
    string $userId,
    string $tudcOpenid,
    string $tudcToken
  );

  /**
   * Change user password
   */
  public function changeLoginPassword(
    string $userId,
    string $oldPassword,
    string $password
  );

  /**
   * Reset user password
   *
   * @param string $mobile    mobile with country code part
   * @param string $password  new password will be reset
   */
  public function resetPassword(string $mobile, string $password);

  /**
   * Bind mobile to specified user
   *
   * @param string $userId
   * @param int $countryCode  country code
   * @param string $mobile    mobile with country code part
   */
  public function bindMobile(string $userId, int $countryCode, string $mobile);

  /**
   * User init login password after login with thrid-party account
   *
   * @param string $userId
   * @param string $password
   */
  public function initLoginPassword(string $userId, string $password);

  /**
   * Fetch socialite user
   *
   * @param string $appChannel         such as singplus | boomsing
   * @param string $socialiteUserId    socialite user id
   * @param string $provider          socialite type, eg: facebook
   *
   * @return ?\stdClass                properties as below:
   *                                  - userId string
   *                                  - socialiteUserId ?string     // 只有分渠道前老用户有该字段
   */
  public function fetchUserFromSocialite(
    string $appChannel,
    string $socialiteUserId,
    string $provider
  ) : ?\stdClass;

  /**
   * Fetch TUDC user
   *
   * @param ?string $appChannel   app channel, such as singplus | boomsing
   * @param string $tudcOpenid
   *
   * @return ?\stdClass         properties as below
   *                            - userId
   */
  public function fetchUserFromTUDC(string $appChannel, string $tudcOpenid) : ?\stdClass;

  /**
   * Get socialite users
   *
   * @param string $appChannel            such as singplus | boomsing
   * @param array $socialiteUserIds       socialite user id
   * @param string $provider              such as facebook, whatsapp and so on
   *
   * @param \Collection                   elements as below:
   *                                      - userId string           sing+ user id
   *                                      - socialiteUserId string  socialite user id
   *                                      - provider  string        such as facebook, whatsapp ...
   */
  public function fetchSocialiteUsers(
    string $appChannel,
    array $socialiteUserIds,
    string $provider
  ) : Collection;

  /**
   * Bind user push alias
   *
   * @param string $appChannel  such as singplus | boomsing
   * @param string $userId
   * @param ?string $alias      subscribe push token generated by client
   */
  public function bindUserPushAlias(string $appChannel, string $userId, ?string $alias);

  /**
   * Get user push alias
   *
   * @param string $appChannel
   * @param string $userId
   */
  public function getUserPushAlias(string $appChannel, string $userId) : ?string;

  /**
   * Judge wheter alias aready bound or not
   */
  public function isPushAliasBound(string $appChannel, string $alias) : bool;

  /**
   * Sync stale socialite user id into channels
   */
  public function syncStaleSocialiteUserIntoChannel(
    string $appChannel,
    string $provider,
    string $userId,
    string $socialiteUserId,
    string $userAccessToken,
    ?string $unionToken
  );
}
